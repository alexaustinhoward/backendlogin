{"version":3,"sources":["logo.svg","Pages/LandingPage/Landing.Page.jsx","Context/UserContext.js","Pages/Register-LoginPage/Register-Login.Page.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","LandingPage","state","className","Component","createContext","RegisterLoginPage","history","useHistory","useState","email","setEmail","username","setUsername","password","setPassword","passwordcheck","setPasswordCheck","firstname","setFirstname","lastname","setLastname","setUserData","useContext","UserContext","TabPane","Tabs","layout","labelCol","span","wrapperCol","tailLayout","offset","registersumbit","a","newUser","Axios","post","push","console","log","loginsumbit","loginUser","loginRes","token","data","user","localStorage","setItem","theme","defaultActiveKey","tab","key","name","initialValues","remember","onFinish","Item","label","rules","type","required","message","onChange","e","target","value","Password","htmlType","min","App","undefined","userData","useEffect","getItem","headers","get","userRes","checkLoggedin","Provider","selectedKeys","mode","icon","HomeOutlined","to","style","textDecoration","onClick","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"yKAAAA,EAAOC,QAAU,IAA0B,kC,+QC4B5BC,G,yDAnBX,aAAc,IAAD,8BACT,gBACKC,MAAM,GAFF,E,kGAUT,OACA,yBAAKC,UAAU,eAEV,yBAAKA,UAAU,oBAAf,0BACA,yBAAKA,UAAU,oBAAf,uB,GAfaC,c,6CCNXC,0BAAc,M,QCUd,SAAUC,IACrB,IAAMC,EAAUC,cADyB,EAEhBC,qBAFgB,mBAEhCC,EAFgC,KAE1BC,EAF0B,OAGVF,qBAHU,mBAGhCG,EAHgC,KAGvBC,EAHuB,OAIVJ,qBAJU,mBAIhCK,EAJgC,KAIvBC,EAJuB,OAKAN,qBALA,mBAKhCO,EALgC,KAKlBC,EALkB,OAMRR,qBANQ,mBAMhCS,EANgC,KAMtBC,EANsB,OAOVV,qBAPU,mBAOhCW,EAPgC,KAOvBC,EAPuB,KAQ/BC,EAAgBC,qBAAWC,GAA3BF,YACCG,EAASC,IAATD,QACDE,EAAS,CACXC,SAAU,CACRC,KAAM,GAERC,WAAY,CACVD,KAAM,IAGJE,EAAa,CACjBD,WAAY,CACVE,OAAQ,EACRH,KAAM,KAMXI,EAAc,uCAAG,4BAAAC,EAAA,sEAGRC,EAAQ,CAACzB,QAAMI,WAASE,gBAAcJ,WAASM,YAAUE,YAHjD,SAIRgB,IAAMC,KAAK,qCAAsCF,GAJzC,cAKd5B,EAAQ+B,KAAK,KALC,SAMYF,IAAMC,KAAK,uCAAwC,CACjF3B,QACAE,aARkB,gEAYjB2B,QAAQC,IAAR,MAZiB,0DAAH,qDAeZC,EAAW,uCAAG,8BAAAP,EAAA,sEAGPQ,EAAY,CAAEhC,QAAOI,YAHd,SAIUsB,IAAMC,KAC3B,oCACAK,GANW,OAIPC,EAJO,OAQbrB,EAAY,CACVsB,MAAOD,EAASE,KAAKD,MACrBE,KAAMH,EAASE,KAAKC,OAEtBC,aAAaC,QAAQ,aAAcL,EAASE,KAAKD,OACjDrC,EAAQ+B,KAAK,KAbA,kDAebC,QAAQC,IAAR,MAfa,0DAAH,qDAuBrB,OACO,yBAAKrC,UAAU,qBAEd,yBAAKA,UAAU,WACX,kBAAC,IAAD,CAAM8C,MAAM,OAAOC,iBAAiB,KACjC,kBAACzB,EAAD,CAAS0B,IAAI,QAAQC,IAAI,KACpB,kBAAC,IAAD,iBACQzB,EADR,CAEI0B,KAAK,QACLC,cAAe,CACfC,UAAU,GAENC,SAAUf,IAGnB,kBAAC,IAAKgB,KAAN,CACIC,MAAM,QACNL,KAAK,QACLM,MAAO,CACL,CACEC,KAAM,SAET,CACAC,UAAU,EACTC,QAAS,8BAIlB,kBAAC,IAAD,CAAOC,SAAU,SAACC,GAAD,OAAMrD,EAASqD,EAAEC,OAAOC,WAGzC,kBAAC,IAAKT,KAAN,CACIC,MAAM,WACLL,KAAK,WACLM,MAAO,CACP,CACDE,UAAU,EACVC,QAAS,iCAIb,kBAAC,IAAMK,SAAP,CAAiBJ,SAAU,SAACC,GAAD,OAAMjD,EAAYiD,EAAEC,OAAOC,WAGtD,kBAAC,IAAKT,KAAS1B,EACf,kBAAC,IAAD,CAAQ6B,KAAK,UAAUQ,SAAS,UAAhC,aAMA,kBAAC3C,EAAD,CAAS0B,IAAI,WAAWC,IAAI,KAExB,kBAAC,IAAD,iBACQzB,EADR,CAEI0B,KAAK,QACLC,cAAe,CACfC,UAAU,GAENC,SAAUvB,IAGnB,kBAAC,IAAKwB,KAAN,CACIC,MAAM,WACNL,KAAK,WACLM,MAAO,CACN,CACAE,UAAU,EACTC,QAAS,iCAIlB,kBAAC,IAAD,CAAQC,SAAU,SAACC,GAAD,OAAMnD,EAAYmD,EAAEC,OAAOC,WAE7C,kBAAC,IAAKT,KAAN,CACOC,MAAM,QACNL,KAAK,QACLM,MAAO,CACL,CACEC,KAAM,SAET,CACAC,UAAU,EACTC,QAAS,8BAIlB,kBAAC,IAAD,CAAQC,SAAU,SAACC,GAAD,OAAMrD,EAASqD,EAAEC,OAAOC,WAE1C,kBAAC,IAAKT,KAAN,CACOC,MAAM,aACNL,KAAK,YACLM,MAAO,CACN,CACAE,UAAU,EACTC,QAAS,oCAIlB,kBAAC,IAAD,CAAQC,SAAU,SAACC,GAAD,OAAM7C,EAAa6C,EAAEC,OAAOC,WAE9C,kBAAC,IAAKT,KAAN,CACOC,MAAM,YACNL,KAAK,WACLM,MAAO,CACN,CACAE,UAAU,EACTC,QAAS,mCAIlB,kBAAC,IAAD,CAAQC,SAAU,SAACC,GAAD,OAAM3C,EAAY2C,EAAEC,OAAOC,WAE7C,kBAAC,IAAKT,KAAN,CACIC,MAAM,WACLL,KAAK,WACLM,MAAO,CACL,CACEU,IAAI,EACJP,QAAS,2BACb,CACDD,UAAU,EACVC,QAAS,iCAIb,kBAAC,IAAMK,SAAP,CAAiBJ,SAAU,SAACC,GAAD,OAAMjD,EAAYiD,EAAEC,OAAOC,WAEvD,kBAAC,IAAKT,KAAN,CACKC,MAAM,gBACLL,KAAK,gBACLM,MAAO,CACL,CACEU,IAAI,EACJP,QAAS,2BACb,CACDD,UAAU,EACVC,QAAS,kCAIb,kBAAC,IAAMK,SAAP,CAAiBJ,SAAU,SAACC,GAAD,OAAM/C,EAAiB+C,EAAEC,OAAOC,WAG3D,kBAAC,IAAKT,KAAS1B,EACf,kBAAC,IAAD,CAAQ6B,KAAK,UAAUQ,SAAS,UAAhC,gB,qBClND,SAASE,IAAO,IAAD,EAEA7D,mBAAS,CACpCmC,WAAM2B,EACNzB,UAAKyB,IAJsB,mBAEvBC,EAFuB,KAEdlD,EAFc,KAM/BmD,qBAAU,YACS,uCAAE,8BAAAvC,EAAA,6DAEP,QADRU,EAAOG,aAAa2B,QAAQ,iBAE9B3B,aAAaC,QAAQ,aAAa,IAClCJ,EAAM,IAJW,SAMER,IAAMC,KACzB,2CACA,KACA,CAAEsC,QAAS,CAAE,eAAgB/B,KATZ,kBAWNC,KAXM,iCAYIT,IAAMwC,IAAI,+BAC/B,CAACD,QAAQ,CAAC,eAAe/B,KAbR,OAYXiC,EAZW,OAcjBvD,EAAY,CACVsB,QACAE,KAAK+B,EAAQhC,OAhBE,4CAAF,qDAoBnBiC,KACE,IAQA,OACE,kBAAC,IAAD,KACA,kBAACtD,EAAYuD,SAAb,CAAsBb,MAAO,CAACM,WAASlD,gBACvC,kBAAC,IAAD,CAAM2B,MAAM,OAAO+B,aAAa,SAASC,KAAK,cACrC,kBAAC,IAAKxB,KAAN,CAAWL,IAAI,OAAO8B,KAAM,kBAACC,EAAA,EAAD,OACvB,kBAAC,IAAD,CAAMC,GAAG,IAAIC,MAAO,CAAEC,eAAgB,SAAtC,SAIDd,EAAS1B,KAAQ,kBAAC,IAAKW,KAAN,CAAWL,IAAI,UAC5B,yBAAKmC,QAjBX,WACbjE,EAAY,CACVsB,WAAO2B,EACPzB,UAAMyB,IAERxB,aAAaC,QAAQ,aAAc,MAYhB,WAKF,oCACH,kBAAC,IAAKS,KAAN,CAAWL,IAAI,YACV,kBAAC,IAAD,CAAMgC,GAAG,SAASC,MAAO,CAAEC,eAAgB,SAA3C,aAIL,kBAAC,IAAK7B,KAAN,CAAWL,IAAI,SACX,kBAAC,IAAD,CAAMgC,GAAG,SAASC,MAAO,CAAEC,eAAgB,SAA3C,YAOhB,yBAAKnF,UAAU,OACf,kBAAC,IAAD,CAAOqF,OAAK,EAACC,KAAK,IAAIC,UAAWzF,IACnC,kBAAC,IAAD,CAAOuF,OAAK,EAACC,KAAK,SAASC,UAAWpF,OCnEpBqF,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrE,QAAQqE,MAAMA,EAAM9C,c","file":"static/js/main.71cdd42b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import { Menu } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport './Landing.Style.scss';\r\nimport React,{ Component} from 'react';\r\nimport { HomeOutlined } from '@ant-design/icons';\r\nimport { Typography } from 'antd';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass LandingPage extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n         \r\n        };\r\n    }\r\n    componentDidMount(){\r\n\r\n    }\r\n    render() {\r\n        return(\r\n        <div className='LandingPage'>\r\n           \r\n             <div className='WelcomeMessage-1'>Connecting with People</div>\r\n             <div className='WelcomeMessage-2'>made brilliant</div>\r\n         </div>\r\n\r\n);}\r\n}\r\nexport default LandingPage;","import { createContext } from \"react\";\r\n\r\nexport default createContext(null);","import { Menu } from 'antd';\r\nimport 'antd/dist/antd.css';\r\nimport './Register-Login.Style.scss';\r\nimport React,{ Component,useState,useContext} from 'react';\r\nimport { HomeOutlined } from '@ant-design/icons';\r\nimport { Typography } from 'antd';\r\nimport { Tabs } from 'antd';\r\nimport { Form, Input, Button, Checkbox } from 'antd';\r\nimport {Link} from 'react-router-dom';\r\nimport Axios from \"axios\";\r\nimport UserContext from \"../../Context/UserContext\";\r\nimport { useHistory } from \"react-router-dom\";\r\nexport default function  RegisterLoginPage (){\r\n    const history = useHistory();\r\n      const [email,setEmail]=useState();\r\n      const [username,setUsername]=useState();\r\n      const [password,setPassword]=useState();\r\n      const [passwordcheck,setPasswordCheck]=useState();\r\n      const [firstname,setFirstname]=useState();\r\n      const [lastname,setLastname]=useState();\r\n      const { setUserData } = useContext(UserContext);\r\n        const {TabPane}=Tabs;\r\n        const layout = {\r\n            labelCol: {\r\n              span: 8,\r\n            },\r\n            wrapperCol: {\r\n              span: 8,\r\n            },\r\n          };\r\n          const tailLayout = {\r\n            wrapperCol: {\r\n              offset: 8,\r\n              span: 12,\r\n            },\r\n          };\r\n\r\n\r\n\r\n  const  registersumbit = async () =>{\r\n    \r\n        try{\r\n            const newUser={email,password,passwordcheck,username,firstname,lastname}\r\n            await Axios.post(\"http://localhost:8081/users/signup\", newUser)\r\n            history.push(\"/\");\r\n            const accountmail = await Axios.post(\"http://localhost:8081/users/sendcom/\", {\r\n        email,\r\n        username,\r\n      });\r\n     \r\n        } catch(err){\r\n         console.log(err)\r\n        }\r\n    };\r\n    const  loginsumbit = async () =>{\r\n      \r\n        try {\r\n            const loginUser = { email, password };\r\n            const loginRes = await Axios.post(\r\n              \"http://localhost:8081/users/login\",\r\n              loginUser\r\n            );\r\n            setUserData({\r\n              token: loginRes.data.token,\r\n              user: loginRes.data.user,\r\n            });\r\n            localStorage.setItem(\"auth-token\", loginRes.data.token);\r\n            history.push(\"/\");\r\n          } catch (err) {\r\n            console.log(err)\r\n          }\r\n    };\r\n    \r\n        \r\n\r\n\r\n\r\n return(\r\n        <div className='RegisterLoginPage'>\r\n         \r\n         <div className='SRspace'>\r\n             <Tabs theme=\"dark\" defaultActiveKey=\"1\">\r\n                <TabPane tab=\"Login\" key=\"1\">\r\n                     <Form\r\n                         {...layout}\r\n                         name=\"basic\"\r\n                         initialValues={{\r\n                         remember: true,\r\n                             }}\r\n                             onFinish={loginsumbit} \r\n                        \r\n                         >\r\n                    <Form.Item\r\n                        label=\"email\"\r\n                        name=\"email\"\r\n                        rules={[\r\n                          {\r\n                            type: 'email',\r\n                          },\r\n                         {\r\n                         required: true,\r\n                          message: 'Please input your email!',\r\n                         },\r\n                          ]}\r\n                         >\r\n                 <Input onChange={(e)=> setEmail(e.target.value)}/>\r\n                 </Form.Item>\r\n\r\n                 <Form.Item\r\n                     label=\"Password\"\r\n                      name=\"password\"\r\n                      rules={[\r\n                      {\r\n                     required: true,\r\n                     message: 'Please input your password!',\r\n                       },\r\n                     ]}\r\n                      >\r\n                 <Input.Password  onChange={(e)=> setPassword(e.target.value)}/>\r\n                </Form.Item>\r\n                \r\n                 <Form.Item {...tailLayout}>\r\n                 <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                 </Button>\r\n                </Form.Item>\r\n                </Form> \r\n                </TabPane>\r\n                 <TabPane tab=\"Register\" key=\"2\">\r\n                     \r\n                     <Form\r\n                         {...layout}\r\n                         name=\"basic\"\r\n                         initialValues={{\r\n                         remember: true,\r\n                             }}\r\n                             onFinish={registersumbit} \r\n                         >\r\n\r\n                    <Form.Item\r\n                        label=\"Username\"\r\n                        name=\"username\"\r\n                        rules={[\r\n                         {\r\n                         required: true,\r\n                          message: 'Please input your username!',\r\n                         },\r\n                          ]}\r\n                         >\r\n                 <Input  onChange={(e)=> setUsername(e.target.value)} />\r\n                 </Form.Item>\r\n                 <Form.Item\r\n                        label=\"Email\"\r\n                        name=\"email\"\r\n                        rules={[\r\n                          {\r\n                            type: 'email',\r\n                          },\r\n                         {\r\n                         required: true,\r\n                          message: 'Please input your email!',\r\n                         },\r\n                          ]}\r\n                         >\r\n                 <Input  onChange={(e)=> setEmail(e.target.value)} />\r\n                 </Form.Item>\r\n                 <Form.Item\r\n                        label=\"First Name\"\r\n                        name=\"Firstrame\"\r\n                        rules={[\r\n                         {\r\n                         required: true,\r\n                          message: 'Please input your  first name!',\r\n                         },\r\n                          ]}\r\n                         >\r\n                 <Input  onChange={(e)=> setFirstname(e.target.value)} />\r\n                 </Form.Item>\r\n                 <Form.Item\r\n                        label=\"Last name\"\r\n                        name=\"Lastname\"\r\n                        rules={[\r\n                         {\r\n                         required: true,\r\n                          message: 'Please input your  Last name!',\r\n                         },\r\n                          ]}\r\n                         >\r\n                 <Input  onChange={(e)=> setLastname(e.target.value)} />\r\n                 </Form.Item>\r\n                 <Form.Item\r\n                     label=\"Password\"\r\n                      name=\"password\"\r\n                      rules={[\r\n                        {\r\n                          min:8,\r\n                          message: 'password is  too short!'},\r\n                      {\r\n                     required: true,\r\n                     message: 'Please input your password!',\r\n                       },\r\n                     ]}\r\n                      >\r\n                 <Input.Password  onChange={(e)=> setPassword(e.target.value)}/>\r\n                </Form.Item>\r\n                <Form.Item\r\n                     label=\"PasswordCheck\"\r\n                      name=\"passwordCheck\"\r\n                      rules={[\r\n                        {\r\n                          min:8,\r\n                          message: 'password is  too short!'},\r\n                      {\r\n                     required: true,\r\n                     message: 'Please retype your password!',\r\n                       },\r\n                     ]}\r\n                      >\r\n                 <Input.Password  onChange={(e)=> setPasswordCheck(e.target.value)} />\r\n                </Form.Item>\r\n                \r\n                 <Form.Item {...tailLayout}>\r\n                 <Button type=\"primary\" htmlType=\"submit\">\r\n                    Submit\r\n                 </Button>\r\n                </Form.Item>\r\n                </Form> \r\n\r\n                </TabPane>\r\n            </Tabs>\r\n         </div>\r\n            \r\n     </div>\r\n\r\n);}\r\n\r\n","import React,{useState,useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Menu } from 'antd';\nimport 'antd/dist/antd.css';\nimport Axios from \"axios\";\nimport { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\nimport LandingPage from './Pages/LandingPage/Landing.Page';\nimport RegisterLoginPage from './Pages/Register-LoginPage/Register-Login.Page';\nimport {BrowserRouter, Route,Redirect,Link} from 'react-router-dom';\nimport { HomeOutlined } from '@ant-design/icons';\n import UserContext from \"./Context/UserContext\";\n export default function App() {\n\n  const[userData,setUserData]= useState({\n    token:undefined,\n    user:undefined,\n  })\nuseEffect(()=>{\nconst checkLoggedin= async()=>{\n  let token= localStorage.getItem(\"auth-token\");\n  if (token===null){\n    localStorage.setItem(\"auth-token\",\"\");\n    token=\"\";\n  }\n  const tokenRes=await Axios.post(\n    \"http://localhost:8081/users/IsTokenValid\",\n    null,\n    { headers: { \"x-auth-token\": token } }\n  );\n  if (tokenRes.data){\n    const userRes= await Axios.get(\"http://localhost:8081/users/\",\n    {headers:{\"x-auth-token\":token},})\n    setUserData({\n      token,\n      user:userRes.data,\n    })\n  }\n}\ncheckLoggedin();\n},[]);\nconst logout = () => {\n  setUserData({\n    token: undefined,\n    user: undefined,\n  });\n  localStorage.setItem(\"auth-token\", \"\");\n};\n  return (\n    <BrowserRouter>\n    <UserContext.Provider value={{userData,setUserData}}>\n    <Menu theme=\"dark\" selectedKeys='navbar' mode=\"horizontal\">\n             <Menu.Item key=\"home\" icon={<HomeOutlined />}>\n                  <Link to='/' style={{ textDecoration: 'none' }}>\n                                            Home\n                </Link> \n                </Menu.Item>\n                {userData.user ? (<Menu.Item key=\"logout\" >\n                     <div onClick={logout} >\n                                            Logout\n                     </div>\n                </Menu.Item>\n                \n                ):(<>\n                <Menu.Item key=\"register\" >\n                     <Link to='/login' style={{ textDecoration: 'none' }}>\n                                            Register\n                     </Link>\n                </Menu.Item>\n                <Menu.Item key=\"login\" >\n                    <Link to='/login' style={{ textDecoration: 'none' }}>\n                                            Login\n                     </Link>\n                </Menu.Item>\n                </>)}\n             </Menu>\n\n    <div className=\"App\">\n    <Route exact path='/' component={LandingPage} />\n  <Route exact path='/login' component={RegisterLoginPage} />\n\n  </div>\n  </UserContext.Provider>\n    </BrowserRouter>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}